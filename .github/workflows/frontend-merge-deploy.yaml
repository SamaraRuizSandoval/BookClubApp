name: Frontend - Build & Deploy to AKS on main

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write   # required to request GitHub OIDC token
  contents: read

env:
  REGISTRY: ${{ vars.AZURE_CONTAINER_REGISTRY }}
  IMAGE_NAME: bookclub-frontend
  IMAGE_TAG: ${{ github.sha }}
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE || 'default' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Get a GitHub OIDC token (audience must be api://AzureADTokenExchange)
      - name: Get GitHub OIDC token
        id: oidc
        run: |
          TOKEN=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://AzureADTokenExchange" | jq -r '.value')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
            echo "Failed to obtain OIDC token"; exit 1
          fi
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # 2) Azure CLI login using federated token (no client secret needed)
      - name: Azure CLI login via OIDC
        run: |
          az login \
            --service-principal \
            -u "${{ vars.AZURE_CLIENT_ID }}" \
            --tenant "${{ vars.AZURE_TENANT_ID }}" \
            --federated-token "${{ steps.oidc.outputs.token }}"
          az account set --subscription "${{ vars.AZURE_SUBSCRIPTION_ID }}"
          az account show

      # 3) ACR login for Docker push
      - name: ACR login
        run: az acr login --name "${{ vars.ACR_NAME }}"

      # 4) Buildx (cache/multi-arch friendly)
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 5) Build & push the React image
      - name: Build & Push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./book-club-app
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # 6) Configure kubectl context using Azure CLI
      - name: Get AKS credentials
        run: |
          az aks get-credentials \
            --resource-group "${{ vars.AKS_RESOURCE_GROUP }}" \
            --name "${{ vars.AKS_CLUSTER_NAME }}" \
            --overwrite-existing
          kubectl config current-context
          kubectl get nodes

      # 7) Ensure namespace
      - name: Ensure namespace
        run: |
          kubectl get ns "${{ env.K8S_NAMESPACE }}" || kubectl create ns "${{ env.K8S_NAMESPACE }}"

      # 8) Deploy manifests (inject commit SHA into the image tag)
      - name: Deploy Kubernetes manifests
        run: |
          sed "s|{{GIT_SHA}}|${IMAGE_TAG}|g" k8s/deployment.yaml | kubectl apply -f -
          kubectl apply -n "${{ env.K8S_NAMESPACE }}" -f k8s/service.yaml

      # 9) Wait for rollout
      - name: Wait for rollout
        run: |
          kubectl rollout status deployment/bookclub-frontend -n "${{ env.K8S_NAMESPACE }}_
