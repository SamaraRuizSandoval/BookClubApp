name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

env:
  FRONTEND_DIR: book-club-app
  BACKEND_DIR: internal
  NODE_VERSION: '20'
  GO_VERSION: '1.22'

jobs:
  frontend:
    name: Frontend (format, lint, test, coverage)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Prettier (format check)
        run: npm run format

      - name: ESLint
        run: npm run lint

      # Choose one depending on your test runner:
      # - for Vitest coverage:
      - name: Test + Coverage (Vitest)
        run: npm run test:coverage
        if: always()  # still run even if lint/format failed to collect coverage
      # - for CRA/Jest coverage, replace the step above with:
      # - name: Test + Coverage (Jest)
      #   run: npm run test:coverage -- --watchAll=false

      - name: Save coverage artifact (frontend)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            ${{ env.FRONTEND_DIR }}/coverage
            ${{ env.FRONTEND_DIR }}/coverage.*.json
            ${{ env.FRONTEND_DIR }}/coverage.*.lcov
            ${{ env.FRONTEND_DIR }}/coverage.*.xml
          if-no-files-found: ignore

  backend:
    name: Backend (format, lint, test, coverage)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Go mod download
        run: go mod download

      - name: Install gofumpt
        run: go install mvdan.cc/gofumpt@latest

      - name: Format check
        run: |
          CHANGES=$(gofumpt -l .)
          if [ -n "$CHANGES" ]; then
            echo "Files not formatted:"
            echo "$CHANGES"
            exit 1
          fi

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m
          working-directory: ${{ env.BACKEND_DIR }}

      - name: Tests + Coverage
        run: |
          go test ./... -race -covermode=atomic -coverprofile=coverage.out
          go tool cover -func=coverage.out | tail -n 1 > coverage-summary.txt

      - name: Save coverage artifact (backend)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            ${{ env.BACKEND_DIR }}/coverage.out
            ${{ env.BACKEND_DIR }}/coverage-summary.txt
          if-no-files-found: ignore

  # Optional: Gate on both jobs (useful if you add deploy later)
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    steps:
      - name: Summarize
        run: |
          echo "âœ… Frontend & Backend checks completed."
